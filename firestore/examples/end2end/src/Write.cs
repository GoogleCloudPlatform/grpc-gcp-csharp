// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1beta1/write.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Firestore.V1Beta1 {

  /// <summary>Holder for reflection information generated from google/firestore/v1beta1/write.proto</summary>
  public static partial class WriteReflection {

    #region Descriptor
    /// <summary>File descriptor for google/firestore/v1beta1/write.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WriteReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRnb29nbGUvZmlyZXN0b3JlL3YxYmV0YTEvd3JpdGUucHJvdG8SGGdvb2ds",
            "ZS5maXJlc3RvcmUudjFiZXRhMRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5w",
            "cm90bxolZ29vZ2xlL2ZpcmVzdG9yZS92MWJldGExL2NvbW1vbi5wcm90bxon",
            "Z29vZ2xlL2ZpcmVzdG9yZS92MWJldGExL2RvY3VtZW50LnByb3RvGh9nb29n",
            "bGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIp0CCgVXcml0ZRI0CgZ1cGRh",
            "dGUYASABKAsyIi5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuRG9jdW1lbnRI",
            "ABIQCgZkZWxldGUYAiABKAlIABJACgl0cmFuc2Zvcm0YBiABKAsyKy5nb29n",
            "bGUuZmlyZXN0b3JlLnYxYmV0YTEuRG9jdW1lbnRUcmFuc2Zvcm1IABI7Cgt1",
            "cGRhdGVfbWFzaxgDIAEoCzImLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5E",
            "b2N1bWVudE1hc2sSQAoQY3VycmVudF9kb2N1bWVudBgEIAEoCzImLmdvb2ds",
            "ZS5maXJlc3RvcmUudjFiZXRhMS5QcmVjb25kaXRpb25CCwoJb3BlcmF0aW9u",
            "ItoCChFEb2N1bWVudFRyYW5zZm9ybRIQCghkb2N1bWVudBgBIAEoCRJUChBm",
            "aWVsZF90cmFuc2Zvcm1zGAIgAygLMjouZ29vZ2xlLmZpcmVzdG9yZS52MWJl",
            "dGExLkRvY3VtZW50VHJhbnNmb3JtLkZpZWxkVHJhbnNmb3JtGtwBCg5GaWVs",
            "ZFRyYW5zZm9ybRISCgpmaWVsZF9wYXRoGAEgASgJEmUKE3NldF90b19zZXJ2",
            "ZXJfdmFsdWUYAiABKA4yRi5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuRG9j",
            "dW1lbnRUcmFuc2Zvcm0uRmllbGRUcmFuc2Zvcm0uU2VydmVyVmFsdWVIACI9",
            "CgtTZXJ2ZXJWYWx1ZRIcChhTRVJWRVJfVkFMVUVfVU5TUEVDSUZJRUQQABIQ",
            "CgxSRVFVRVNUX1RJTUUQAUIQCg50cmFuc2Zvcm1fdHlwZSJ6CgtXcml0ZVJl",
            "c3VsdBIvCgt1cGRhdGVfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASOgoRdHJhbnNmb3JtX3Jlc3VsdHMYAiADKAsyHy5nb29nbGUu",
            "ZmlyZXN0b3JlLnYxYmV0YTEuVmFsdWUidgoORG9jdW1lbnRDaGFuZ2USNAoI",
            "ZG9jdW1lbnQYASABKAsyIi5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuRG9j",
            "dW1lbnQSEgoKdGFyZ2V0X2lkcxgFIAMoBRIaChJyZW1vdmVkX3RhcmdldF9p",
            "ZHMYBiADKAUibQoORG9jdW1lbnREZWxldGUSEAoIZG9jdW1lbnQYASABKAkS",
            "GgoScmVtb3ZlZF90YXJnZXRfaWRzGAYgAygFEi0KCXJlYWRfdGltZRgEIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAibQoORG9jdW1lbnRSZW1v",
            "dmUSEAoIZG9jdW1lbnQYASABKAkSGgoScmVtb3ZlZF90YXJnZXRfaWRzGAIg",
            "AygFEi0KCXJlYWRfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXAiMwoPRXhpc3RlbmNlRmlsdGVyEhEKCXRhcmdldF9pZBgBIAEoBRIN",
            "CgVjb3VudBgCIAEoBUK4AQocY29tLmdvb2dsZS5maXJlc3RvcmUudjFiZXRh",
            "MUIKV3JpdGVQcm90b1ABWkFnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9n",
            "b29nbGVhcGlzL2ZpcmVzdG9yZS92MWJldGExO2ZpcmVzdG9yZaICBEdDRlOq",
            "Ah5Hb29nbGUuQ2xvdWQuRmlyZXN0b3JlLlYxQmV0YTHKAh5Hb29nbGVcQ2xv",
            "dWRcRmlyZXN0b3JlXFYxYmV0YTFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.Firestore.V1Beta1.CommonReflection.Descriptor, global::Google.Cloud.Firestore.V1Beta1.DocumentReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.Write), global::Google.Cloud.Firestore.V1Beta1.Write.Parser, new[]{ "Update", "Delete", "Transform", "UpdateMask", "CurrentDocument" }, new[]{ "Operation" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.DocumentTransform), global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Parser, new[]{ "Document", "FieldTransforms" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Types.FieldTransform), global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Types.FieldTransform.Parser, new[]{ "FieldPath", "SetToServerValue" }, new[]{ "TransformType" }, new[]{ typeof(global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Types.FieldTransform.Types.ServerValue) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.WriteResult), global::Google.Cloud.Firestore.V1Beta1.WriteResult.Parser, new[]{ "UpdateTime", "TransformResults" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.DocumentChange), global::Google.Cloud.Firestore.V1Beta1.DocumentChange.Parser, new[]{ "Document", "TargetIds", "RemovedTargetIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.DocumentDelete), global::Google.Cloud.Firestore.V1Beta1.DocumentDelete.Parser, new[]{ "Document", "RemovedTargetIds", "ReadTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.DocumentRemove), global::Google.Cloud.Firestore.V1Beta1.DocumentRemove.Parser, new[]{ "Document", "RemovedTargetIds", "ReadTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Firestore.V1Beta1.ExistenceFilter), global::Google.Cloud.Firestore.V1Beta1.ExistenceFilter.Parser, new[]{ "TargetId", "Count" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A write on a document.
  /// </summary>
  public sealed partial class Write : pb::IMessage<Write> {
    private static readonly pb::MessageParser<Write> _parser = new pb::MessageParser<Write>(() => new Write());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Write> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.WriteReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write(Write other) : this() {
      UpdateMask = other.updateMask_ != null ? other.UpdateMask.Clone() : null;
      CurrentDocument = other.currentDocument_ != null ? other.CurrentDocument.Clone() : null;
      switch (other.OperationCase) {
        case OperationOneofCase.Update:
          Update = other.Update.Clone();
          break;
        case OperationOneofCase.Delete:
          Delete = other.Delete;
          break;
        case OperationOneofCase.Transform:
          Transform = other.Transform.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write Clone() {
      return new Write(this);
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 1;
    /// <summary>
    /// A document to write.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Document Update {
      get { return operationCase_ == OperationOneofCase.Update ? (global::Google.Cloud.Firestore.V1Beta1.Document) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Update;
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 2;
    /// <summary>
    /// A document name to delete. In the format:
    /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Delete {
      get { return operationCase_ == OperationOneofCase.Delete ? (string) operation_ : ""; }
      set {
        operation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        operationCase_ = OperationOneofCase.Delete;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 6;
    /// <summary>
    /// Applies a tranformation to a document.
    /// At most one `transform` per document is allowed in a given request.
    /// An `update` cannot follow a `transform` on the same document in a given
    /// request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentTransform Transform {
      get { return operationCase_ == OperationOneofCase.Transform ? (global::Google.Cloud.Firestore.V1Beta1.DocumentTransform) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Transform;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Cloud.Firestore.V1Beta1.DocumentMask updateMask_;
    /// <summary>
    /// The fields to update in this write.
    ///
    /// This field can be set only when the operation is `update`.
    /// None of the field paths in the mask may contain a reserved name.
    /// If the document exists on the server and has fields not referenced in the
    /// mask, they are left unchanged.
    /// Fields referenced in the mask, but not present in the input document, are
    /// deleted from the document on the server.
    /// The field paths in this mask must not contain a reserved field name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.DocumentMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "current_document" field.</summary>
    public const int CurrentDocumentFieldNumber = 4;
    private global::Google.Cloud.Firestore.V1Beta1.Precondition currentDocument_;
    /// <summary>
    /// An optional precondition on the document.
    ///
    /// The write will fail if this is set and not met by the target document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Precondition CurrentDocument {
      get { return currentDocument_; }
      set {
        currentDocument_ = value;
      }
    }

    private object operation_;
    /// <summary>Enum of possible cases for the "operation" oneof.</summary>
    public enum OperationOneofCase {
      None = 0,
      Update = 1,
      Delete = 2,
      Transform = 6,
    }
    private OperationOneofCase operationCase_ = OperationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationOneofCase OperationCase {
      get { return operationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOperation() {
      operationCase_ = OperationOneofCase.None;
      operation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Write);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Write other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Update, other.Update)) return false;
      if (Delete != other.Delete) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (!object.Equals(CurrentDocument, other.CurrentDocument)) return false;
      if (OperationCase != other.OperationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (operationCase_ == OperationOneofCase.Update) hash ^= Update.GetHashCode();
      if (operationCase_ == OperationOneofCase.Delete) hash ^= Delete.GetHashCode();
      if (operationCase_ == OperationOneofCase.Transform) hash ^= Transform.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (currentDocument_ != null) hash ^= CurrentDocument.GetHashCode();
      hash ^= (int) operationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (operationCase_ == OperationOneofCase.Update) {
        output.WriteRawTag(10);
        output.WriteMessage(Update);
      }
      if (operationCase_ == OperationOneofCase.Delete) {
        output.WriteRawTag(18);
        output.WriteString(Delete);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
      if (currentDocument_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CurrentDocument);
      }
      if (operationCase_ == OperationOneofCase.Transform) {
        output.WriteRawTag(50);
        output.WriteMessage(Transform);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (operationCase_ == OperationOneofCase.Update) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (operationCase_ == OperationOneofCase.Delete) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Delete);
      }
      if (operationCase_ == OperationOneofCase.Transform) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (currentDocument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentDocument);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Write other) {
      if (other == null) {
        return;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          updateMask_ = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.currentDocument_ != null) {
        if (currentDocument_ == null) {
          currentDocument_ = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
        }
        CurrentDocument.MergeFrom(other.CurrentDocument);
      }
      switch (other.OperationCase) {
        case OperationOneofCase.Update:
          Update = other.Update;
          break;
        case OperationOneofCase.Delete:
          Delete = other.Delete;
          break;
        case OperationOneofCase.Transform:
          Transform = other.Transform;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Cloud.Firestore.V1Beta1.Document subBuilder = new global::Google.Cloud.Firestore.V1Beta1.Document();
            if (operationCase_ == OperationOneofCase.Update) {
              subBuilder.MergeFrom(Update);
            }
            input.ReadMessage(subBuilder);
            Update = subBuilder;
            break;
          }
          case 18: {
            Delete = input.ReadString();
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              updateMask_ = new global::Google.Cloud.Firestore.V1Beta1.DocumentMask();
            }
            input.ReadMessage(updateMask_);
            break;
          }
          case 34: {
            if (currentDocument_ == null) {
              currentDocument_ = new global::Google.Cloud.Firestore.V1Beta1.Precondition();
            }
            input.ReadMessage(currentDocument_);
            break;
          }
          case 50: {
            global::Google.Cloud.Firestore.V1Beta1.DocumentTransform subBuilder = new global::Google.Cloud.Firestore.V1Beta1.DocumentTransform();
            if (operationCase_ == OperationOneofCase.Transform) {
              subBuilder.MergeFrom(Transform);
            }
            input.ReadMessage(subBuilder);
            Transform = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A transformation of a document.
  /// </summary>
  public sealed partial class DocumentTransform : pb::IMessage<DocumentTransform> {
    private static readonly pb::MessageParser<DocumentTransform> _parser = new pb::MessageParser<DocumentTransform>(() => new DocumentTransform());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DocumentTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.WriteReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentTransform(DocumentTransform other) : this() {
      document_ = other.document_;
      fieldTransforms_ = other.fieldTransforms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentTransform Clone() {
      return new DocumentTransform(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private string document_ = "";
    /// <summary>
    /// The name of the document to transform.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Document {
      get { return document_; }
      set {
        document_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field_transforms" field.</summary>
    public const int FieldTransformsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Types.FieldTransform> _repeated_fieldTransforms_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Types.FieldTransform.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Types.FieldTransform> fieldTransforms_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Types.FieldTransform>();
    /// <summary>
    /// The list of transformations to apply to the fields of the document, in
    /// order.
    /// This must not be empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Types.FieldTransform> FieldTransforms {
      get { return fieldTransforms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DocumentTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DocumentTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Document != other.Document) return false;
      if(!fieldTransforms_.Equals(other.fieldTransforms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Document.Length != 0) hash ^= Document.GetHashCode();
      hash ^= fieldTransforms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Document.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Document);
      }
      fieldTransforms_.WriteTo(output, _repeated_fieldTransforms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Document.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Document);
      }
      size += fieldTransforms_.CalculateSize(_repeated_fieldTransforms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DocumentTransform other) {
      if (other == null) {
        return;
      }
      if (other.Document.Length != 0) {
        Document = other.Document;
      }
      fieldTransforms_.Add(other.fieldTransforms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Document = input.ReadString();
            break;
          }
          case 18: {
            fieldTransforms_.AddEntriesFrom(input, _repeated_fieldTransforms_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DocumentTransform message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A transformation of a field of the document.
      /// </summary>
      public sealed partial class FieldTransform : pb::IMessage<FieldTransform> {
        private static readonly pb::MessageParser<FieldTransform> _parser = new pb::MessageParser<FieldTransform>(() => new FieldTransform());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FieldTransform> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldTransform() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldTransform(FieldTransform other) : this() {
          fieldPath_ = other.fieldPath_;
          switch (other.TransformTypeCase) {
            case TransformTypeOneofCase.SetToServerValue:
              SetToServerValue = other.SetToServerValue;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldTransform Clone() {
          return new FieldTransform(this);
        }

        /// <summary>Field number for the "field_path" field.</summary>
        public const int FieldPathFieldNumber = 1;
        private string fieldPath_ = "";
        /// <summary>
        /// The path of the field. See [Document.fields][google.firestore.v1beta1.Document.fields] for the field path syntax
        /// reference.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldPath {
          get { return fieldPath_; }
          set {
            fieldPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "set_to_server_value" field.</summary>
        public const int SetToServerValueFieldNumber = 2;
        /// <summary>
        /// Sets the field to the given server value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Types.FieldTransform.Types.ServerValue SetToServerValue {
          get { return transformTypeCase_ == TransformTypeOneofCase.SetToServerValue ? (global::Google.Cloud.Firestore.V1Beta1.DocumentTransform.Types.FieldTransform.Types.ServerValue) transformType_ : 0; }
          set {
            transformType_ = value;
            transformTypeCase_ = TransformTypeOneofCase.SetToServerValue;
          }
        }

        private object transformType_;
        /// <summary>Enum of possible cases for the "transform_type" oneof.</summary>
        public enum TransformTypeOneofCase {
          None = 0,
          SetToServerValue = 2,
        }
        private TransformTypeOneofCase transformTypeCase_ = TransformTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TransformTypeOneofCase TransformTypeCase {
          get { return transformTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTransformType() {
          transformTypeCase_ = TransformTypeOneofCase.None;
          transformType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FieldTransform);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FieldTransform other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FieldPath != other.FieldPath) return false;
          if (SetToServerValue != other.SetToServerValue) return false;
          if (TransformTypeCase != other.TransformTypeCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FieldPath.Length != 0) hash ^= FieldPath.GetHashCode();
          if (transformTypeCase_ == TransformTypeOneofCase.SetToServerValue) hash ^= SetToServerValue.GetHashCode();
          hash ^= (int) transformTypeCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FieldPath.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FieldPath);
          }
          if (transformTypeCase_ == TransformTypeOneofCase.SetToServerValue) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SetToServerValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FieldPath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldPath);
          }
          if (transformTypeCase_ == TransformTypeOneofCase.SetToServerValue) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SetToServerValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FieldTransform other) {
          if (other == null) {
            return;
          }
          if (other.FieldPath.Length != 0) {
            FieldPath = other.FieldPath;
          }
          switch (other.TransformTypeCase) {
            case TransformTypeOneofCase.SetToServerValue:
              SetToServerValue = other.SetToServerValue;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                FieldPath = input.ReadString();
                break;
              }
              case 16: {
                transformType_ = input.ReadEnum();
                transformTypeCase_ = TransformTypeOneofCase.SetToServerValue;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the FieldTransform message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A value that is calculated by the server.
          /// </summary>
          public enum ServerValue {
            /// <summary>
            /// Unspecified. This value must not be used.
            /// </summary>
            [pbr::OriginalName("SERVER_VALUE_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// The time at which the server processed the request, with millisecond
            /// precision.
            /// </summary>
            [pbr::OriginalName("REQUEST_TIME")] RequestTime = 1,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// The result of applying a write.
  /// </summary>
  public sealed partial class WriteResult : pb::IMessage<WriteResult> {
    private static readonly pb::MessageParser<WriteResult> _parser = new pb::MessageParser<WriteResult>(() => new WriteResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.WriteReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResult(WriteResult other) : this() {
      UpdateTime = other.updateTime_ != null ? other.UpdateTime.Clone() : null;
      transformResults_ = other.transformResults_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResult Clone() {
      return new WriteResult(this);
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// The last update time of the document after applying the write. Not set
    /// after a `delete`.
    ///
    /// If the write did not actually change the document, this will be the
    /// previous update_time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "transform_results" field.</summary>
    public const int TransformResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.Firestore.V1Beta1.Value> _repeated_transformResults_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.Firestore.V1Beta1.Value.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Value> transformResults_ = new pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Value>();
    /// <summary>
    /// The results of applying each [DocumentTransform.FieldTransform][google.firestore.v1beta1.DocumentTransform.FieldTransform], in the
    /// same order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.Firestore.V1Beta1.Value> TransformResults {
      get { return transformResults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if(!transformResults_.Equals(other.transformResults_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      hash ^= transformResults_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (updateTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UpdateTime);
      }
      transformResults_.WriteTo(output, _repeated_transformResults_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      size += transformResults_.CalculateSize(_repeated_transformResults_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteResult other) {
      if (other == null) {
        return;
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      transformResults_.Add(other.transformResults_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (updateTime_ == null) {
              updateTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(updateTime_);
            break;
          }
          case 18: {
            transformResults_.AddEntriesFrom(input, _repeated_transformResults_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A [Document][google.firestore.v1beta1.Document] has changed.
  ///
  /// May be the result of multiple [writes][google.firestore.v1beta1.Write], including deletes, that
  /// ultimately resulted in a new value for the [Document][google.firestore.v1beta1.Document].
  ///
  /// Multiple [DocumentChange][google.firestore.v1beta1.DocumentChange] messages may be returned for the same logical
  /// change, if multiple targets are affected.
  /// </summary>
  public sealed partial class DocumentChange : pb::IMessage<DocumentChange> {
    private static readonly pb::MessageParser<DocumentChange> _parser = new pb::MessageParser<DocumentChange>(() => new DocumentChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DocumentChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.WriteReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentChange(DocumentChange other) : this() {
      Document = other.document_ != null ? other.Document.Clone() : null;
      targetIds_ = other.targetIds_.Clone();
      removedTargetIds_ = other.removedTargetIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentChange Clone() {
      return new DocumentChange(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private global::Google.Cloud.Firestore.V1Beta1.Document document_;
    /// <summary>
    /// The new state of the [Document][google.firestore.v1beta1.Document].
    ///
    /// If `mask` is set, contains only fields that were updated or added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Firestore.V1Beta1.Document Document {
      get { return document_; }
      set {
        document_ = value;
      }
    }

    /// <summary>Field number for the "target_ids" field.</summary>
    public const int TargetIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_targetIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> targetIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// A set of target IDs of targets that match this document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TargetIds {
      get { return targetIds_; }
    }

    /// <summary>Field number for the "removed_target_ids" field.</summary>
    public const int RemovedTargetIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_removedTargetIds_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> removedTargetIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// A set of target IDs for targets that no longer match this document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemovedTargetIds {
      get { return removedTargetIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DocumentChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DocumentChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Document, other.Document)) return false;
      if(!targetIds_.Equals(other.targetIds_)) return false;
      if(!removedTargetIds_.Equals(other.removedTargetIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (document_ != null) hash ^= Document.GetHashCode();
      hash ^= targetIds_.GetHashCode();
      hash ^= removedTargetIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (document_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Document);
      }
      targetIds_.WriteTo(output, _repeated_targetIds_codec);
      removedTargetIds_.WriteTo(output, _repeated_removedTargetIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (document_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Document);
      }
      size += targetIds_.CalculateSize(_repeated_targetIds_codec);
      size += removedTargetIds_.CalculateSize(_repeated_removedTargetIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DocumentChange other) {
      if (other == null) {
        return;
      }
      if (other.document_ != null) {
        if (document_ == null) {
          document_ = new global::Google.Cloud.Firestore.V1Beta1.Document();
        }
        Document.MergeFrom(other.Document);
      }
      targetIds_.Add(other.targetIds_);
      removedTargetIds_.Add(other.removedTargetIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (document_ == null) {
              document_ = new global::Google.Cloud.Firestore.V1Beta1.Document();
            }
            input.ReadMessage(document_);
            break;
          }
          case 42:
          case 40: {
            targetIds_.AddEntriesFrom(input, _repeated_targetIds_codec);
            break;
          }
          case 50:
          case 48: {
            removedTargetIds_.AddEntriesFrom(input, _repeated_removedTargetIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A [Document][google.firestore.v1beta1.Document] has been deleted.
  ///
  /// May be the result of multiple [writes][google.firestore.v1beta1.Write], including updates, the
  /// last of which deleted the [Document][google.firestore.v1beta1.Document].
  ///
  /// Multiple [DocumentDelete][google.firestore.v1beta1.DocumentDelete] messages may be returned for the same logical
  /// delete, if multiple targets are affected.
  /// </summary>
  public sealed partial class DocumentDelete : pb::IMessage<DocumentDelete> {
    private static readonly pb::MessageParser<DocumentDelete> _parser = new pb::MessageParser<DocumentDelete>(() => new DocumentDelete());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DocumentDelete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.WriteReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentDelete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentDelete(DocumentDelete other) : this() {
      document_ = other.document_;
      removedTargetIds_ = other.removedTargetIds_.Clone();
      ReadTime = other.readTime_ != null ? other.ReadTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentDelete Clone() {
      return new DocumentDelete(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private string document_ = "";
    /// <summary>
    /// The resource name of the [Document][google.firestore.v1beta1.Document] that was deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Document {
      get { return document_; }
      set {
        document_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "removed_target_ids" field.</summary>
    public const int RemovedTargetIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_removedTargetIds_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> removedTargetIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// A set of target IDs for targets that previously matched this entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemovedTargetIds {
      get { return removedTargetIds_; }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp readTime_;
    /// <summary>
    /// The read timestamp at which the delete was observed.
    ///
    /// Greater or equal to the `commit_time` of the delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReadTime {
      get { return readTime_; }
      set {
        readTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DocumentDelete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DocumentDelete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Document != other.Document) return false;
      if(!removedTargetIds_.Equals(other.removedTargetIds_)) return false;
      if (!object.Equals(ReadTime, other.ReadTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Document.Length != 0) hash ^= Document.GetHashCode();
      hash ^= removedTargetIds_.GetHashCode();
      if (readTime_ != null) hash ^= ReadTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Document.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Document);
      }
      if (readTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReadTime);
      }
      removedTargetIds_.WriteTo(output, _repeated_removedTargetIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Document.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Document);
      }
      size += removedTargetIds_.CalculateSize(_repeated_removedTargetIds_codec);
      if (readTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DocumentDelete other) {
      if (other == null) {
        return;
      }
      if (other.Document.Length != 0) {
        Document = other.Document;
      }
      removedTargetIds_.Add(other.removedTargetIds_);
      if (other.readTime_ != null) {
        if (readTime_ == null) {
          readTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReadTime.MergeFrom(other.ReadTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Document = input.ReadString();
            break;
          }
          case 34: {
            if (readTime_ == null) {
              readTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(readTime_);
            break;
          }
          case 50:
          case 48: {
            removedTargetIds_.AddEntriesFrom(input, _repeated_removedTargetIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A [Document][google.firestore.v1beta1.Document] has been removed from the view of the targets.
  ///
  /// Sent if the document is no longer relevant to a target and is out of view.
  /// Can be sent instead of a DocumentDelete or a DocumentChange if the server
  /// can not send the new value of the document.
  ///
  /// Multiple [DocumentRemove][google.firestore.v1beta1.DocumentRemove] messages may be returned for the same logical
  /// write or delete, if multiple targets are affected.
  /// </summary>
  public sealed partial class DocumentRemove : pb::IMessage<DocumentRemove> {
    private static readonly pb::MessageParser<DocumentRemove> _parser = new pb::MessageParser<DocumentRemove>(() => new DocumentRemove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DocumentRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.WriteReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentRemove(DocumentRemove other) : this() {
      document_ = other.document_;
      removedTargetIds_ = other.removedTargetIds_.Clone();
      ReadTime = other.readTime_ != null ? other.ReadTime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocumentRemove Clone() {
      return new DocumentRemove(this);
    }

    /// <summary>Field number for the "document" field.</summary>
    public const int DocumentFieldNumber = 1;
    private string document_ = "";
    /// <summary>
    /// The resource name of the [Document][google.firestore.v1beta1.Document] that has gone out of view.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Document {
      get { return document_; }
      set {
        document_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "removed_target_ids" field.</summary>
    public const int RemovedTargetIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_removedTargetIds_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> removedTargetIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// A set of target IDs for targets that previously matched this document.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemovedTargetIds {
      get { return removedTargetIds_; }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp readTime_;
    /// <summary>
    /// The read timestamp at which the remove was observed.
    ///
    /// Greater or equal to the `commit_time` of the change/delete/remove.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReadTime {
      get { return readTime_; }
      set {
        readTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DocumentRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DocumentRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Document != other.Document) return false;
      if(!removedTargetIds_.Equals(other.removedTargetIds_)) return false;
      if (!object.Equals(ReadTime, other.ReadTime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Document.Length != 0) hash ^= Document.GetHashCode();
      hash ^= removedTargetIds_.GetHashCode();
      if (readTime_ != null) hash ^= ReadTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Document.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Document);
      }
      removedTargetIds_.WriteTo(output, _repeated_removedTargetIds_codec);
      if (readTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReadTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Document.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Document);
      }
      size += removedTargetIds_.CalculateSize(_repeated_removedTargetIds_codec);
      if (readTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DocumentRemove other) {
      if (other == null) {
        return;
      }
      if (other.Document.Length != 0) {
        Document = other.Document;
      }
      removedTargetIds_.Add(other.removedTargetIds_);
      if (other.readTime_ != null) {
        if (readTime_ == null) {
          readTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReadTime.MergeFrom(other.ReadTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Document = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            removedTargetIds_.AddEntriesFrom(input, _repeated_removedTargetIds_codec);
            break;
          }
          case 34: {
            if (readTime_ == null) {
              readTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(readTime_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A digest of all the documents that match a given target.
  /// </summary>
  public sealed partial class ExistenceFilter : pb::IMessage<ExistenceFilter> {
    private static readonly pb::MessageParser<ExistenceFilter> _parser = new pb::MessageParser<ExistenceFilter>(() => new ExistenceFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExistenceFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Firestore.V1Beta1.WriteReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExistenceFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExistenceFilter(ExistenceFilter other) : this() {
      targetId_ = other.targetId_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExistenceFilter Clone() {
      return new ExistenceFilter(this);
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private int targetId_;
    /// <summary>
    /// The target ID to which this filter applies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// The total count of documents that match [target_id][google.firestore.v1beta1.ExistenceFilter.target_id].
    ///
    /// If different from the count of documents in the client that match, the
    /// client must manually determine which documents no longer match the target.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExistenceFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExistenceFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetId != other.TargetId) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExistenceFilter other) {
      if (other == null) {
        return;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
